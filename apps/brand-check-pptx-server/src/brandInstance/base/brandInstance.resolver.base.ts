/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { BrandInstance } from "./BrandInstance";
import { BrandInstanceCountArgs } from "./BrandInstanceCountArgs";
import { BrandInstanceFindManyArgs } from "./BrandInstanceFindManyArgs";
import { BrandInstanceFindUniqueArgs } from "./BrandInstanceFindUniqueArgs";
import { CreateBrandInstanceArgs } from "./CreateBrandInstanceArgs";
import { UpdateBrandInstanceArgs } from "./UpdateBrandInstanceArgs";
import { DeleteBrandInstanceArgs } from "./DeleteBrandInstanceArgs";
import { BrandRuleFindManyArgs } from "../../brandRule/base/BrandRuleFindManyArgs";
import { BrandRule } from "../../brandRule/base/BrandRule";
import { PresentationFindManyArgs } from "../../presentation/base/PresentationFindManyArgs";
import { Presentation } from "../../presentation/base/Presentation";
import { BrandInstanceService } from "../brandInstance.service";
@graphql.Resolver(() => BrandInstance)
export class BrandInstanceResolverBase {
  constructor(protected readonly service: BrandInstanceService) {}

  async _brandInstancesMeta(
    @graphql.Args() args: BrandInstanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BrandInstance])
  async brandInstances(
    @graphql.Args() args: BrandInstanceFindManyArgs
  ): Promise<BrandInstance[]> {
    return this.service.brandInstances(args);
  }

  @graphql.Query(() => BrandInstance, { nullable: true })
  async brandInstance(
    @graphql.Args() args: BrandInstanceFindUniqueArgs
  ): Promise<BrandInstance | null> {
    const result = await this.service.brandInstance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BrandInstance)
  async createBrandInstance(
    @graphql.Args() args: CreateBrandInstanceArgs
  ): Promise<BrandInstance> {
    return await this.service.createBrandInstance({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BrandInstance)
  async updateBrandInstance(
    @graphql.Args() args: UpdateBrandInstanceArgs
  ): Promise<BrandInstance | null> {
    try {
      return await this.service.updateBrandInstance({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BrandInstance)
  async deleteBrandInstance(
    @graphql.Args() args: DeleteBrandInstanceArgs
  ): Promise<BrandInstance | null> {
    try {
      return await this.service.deleteBrandInstance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BrandInstance)
  async uploadSamplePresentation(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: BrandInstanceFindUniqueArgs
  ): Promise<BrandInstance> {
    return await this.service.uploadSamplePresentation(args, file);
  }

  @graphql.Mutation(() => BrandInstance)
  async deleteSamplePresentation(
    @graphql.Args()
    args: BrandInstanceFindUniqueArgs
  ): Promise<BrandInstance> {
    return await this.service.deleteSamplePresentation(args);
  }

  @graphql.Mutation(() => BrandInstance)
  async uploadSamplePresentations(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: BrandInstanceFindUniqueArgs
  ): Promise<BrandInstance> {
    return await this.service.uploadSamplePresentations(args, file);
  }

  @graphql.Mutation(() => BrandInstance)
  async deleteSamplePresentations(
    @graphql.Args()
    args: BrandInstanceFindUniqueArgs
  ): Promise<BrandInstance> {
    return await this.service.deleteSamplePresentations(args);
  }

  @graphql.ResolveField(() => [BrandRule], { name: "brandRules" })
  async findBrandRules(
    @graphql.Parent() parent: BrandInstance,
    @graphql.Args() args: BrandRuleFindManyArgs
  ): Promise<BrandRule[]> {
    const results = await this.service.findBrandRules(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Presentation], { name: "presentations" })
  async findPresentations(
    @graphql.Parent() parent: BrandInstance,
    @graphql.Args() args: PresentationFindManyArgs
  ): Promise<Presentation[]> {
    const results = await this.service.findPresentations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
