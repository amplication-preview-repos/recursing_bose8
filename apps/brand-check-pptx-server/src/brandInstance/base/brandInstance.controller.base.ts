/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileInterceptor } from "@nestjs/platform-express";
import { BrandInstanceService } from "../brandInstance.service";
import { BrandInstanceCreateInput } from "./BrandInstanceCreateInput";
import { BrandInstance } from "./BrandInstance";
import { BrandInstanceFindManyArgs } from "./BrandInstanceFindManyArgs";
import { BrandInstanceWhereUniqueInput } from "./BrandInstanceWhereUniqueInput";
import { BrandInstanceUpdateInput } from "./BrandInstanceUpdateInput";
import { BrandRuleFindManyArgs } from "../../brandRule/base/BrandRuleFindManyArgs";
import { BrandRule } from "../../brandRule/base/BrandRule";
import { BrandRuleWhereUniqueInput } from "../../brandRule/base/BrandRuleWhereUniqueInput";
import { PresentationFindManyArgs } from "../../presentation/base/PresentationFindManyArgs";
import { Presentation } from "../../presentation/base/Presentation";
import { PresentationWhereUniqueInput } from "../../presentation/base/PresentationWhereUniqueInput";

export class BrandInstanceControllerBase {
  constructor(protected readonly service: BrandInstanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BrandInstance })
  async createBrandInstance(
    @common.Body() data: BrandInstanceCreateInput
  ): Promise<BrandInstance> {
    return await this.service.createBrandInstance({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        samplePresentation: true,
        samplePresentations: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BrandInstance] })
  @ApiNestedQuery(BrandInstanceFindManyArgs)
  async brandInstances(
    @common.Req() request: Request
  ): Promise<BrandInstance[]> {
    const args = plainToClass(BrandInstanceFindManyArgs, request.query);
    return this.service.brandInstances({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        samplePresentation: true,
        samplePresentations: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BrandInstance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async brandInstance(
    @common.Param() params: BrandInstanceWhereUniqueInput
  ): Promise<BrandInstance | null> {
    const result = await this.service.brandInstance({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        samplePresentation: true,
        samplePresentations: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BrandInstance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBrandInstance(
    @common.Param() params: BrandInstanceWhereUniqueInput,
    @common.Body() data: BrandInstanceUpdateInput
  ): Promise<BrandInstance | null> {
    try {
      return await this.service.updateBrandInstance({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          samplePresentation: true,
          samplePresentations: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BrandInstance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBrandInstance(
    @common.Param() params: BrandInstanceWhereUniqueInput
  ): Promise<BrandInstance | null> {
    try {
      return await this.service.deleteBrandInstance({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          samplePresentation: true,
          samplePresentations: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/samplePresentation")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: BrandInstance,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadSamplePresentation(
    @common.Param()
    params: BrandInstanceWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<BrandInstance> {
    return this.service.uploadSamplePresentation(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/samplePresentation")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadSamplePresentation(
    @common.Param()
    params: BrandInstanceWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadSamplePresentation({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/samplePresentation")
  @swagger.ApiOkResponse({
    type: BrandInstance,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteSamplePresentation(
    @common.Param()
    params: BrandInstanceWhereUniqueInput
  ): Promise<BrandInstance> {
    return this.service.deleteSamplePresentation({
      where: params,
    });
  }

  @common.Put(":id/samplePresentations")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: BrandInstance,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadSamplePresentations(
    @common.Param()
    params: BrandInstanceWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<BrandInstance> {
    return this.service.uploadSamplePresentations(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/samplePresentations")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadSamplePresentations(
    @common.Param()
    params: BrandInstanceWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadSamplePresentations({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/samplePresentations")
  @swagger.ApiOkResponse({
    type: BrandInstance,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteSamplePresentations(
    @common.Param()
    params: BrandInstanceWhereUniqueInput
  ): Promise<BrandInstance> {
    return this.service.deleteSamplePresentations({
      where: params,
    });
  }

  @common.Get("/:id/brandRules")
  @ApiNestedQuery(BrandRuleFindManyArgs)
  async findBrandRules(
    @common.Req() request: Request,
    @common.Param() params: BrandInstanceWhereUniqueInput
  ): Promise<BrandRule[]> {
    const query = plainToClass(BrandRuleFindManyArgs, request.query);
    const results = await this.service.findBrandRules(params.id, {
      ...query,
      select: {
        brandInstance: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        ruleDescription: true,
        severity: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/brandRules")
  async connectBrandRules(
    @common.Param() params: BrandInstanceWhereUniqueInput,
    @common.Body() body: BrandRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      brandRules: {
        connect: body,
      },
    };
    await this.service.updateBrandInstance({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/brandRules")
  async updateBrandRules(
    @common.Param() params: BrandInstanceWhereUniqueInput,
    @common.Body() body: BrandRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      brandRules: {
        set: body,
      },
    };
    await this.service.updateBrandInstance({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/brandRules")
  async disconnectBrandRules(
    @common.Param() params: BrandInstanceWhereUniqueInput,
    @common.Body() body: BrandRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      brandRules: {
        disconnect: body,
      },
    };
    await this.service.updateBrandInstance({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/presentations")
  @ApiNestedQuery(PresentationFindManyArgs)
  async findPresentations(
    @common.Req() request: Request,
    @common.Param() params: BrandInstanceWhereUniqueInput
  ): Promise<Presentation[]> {
    const query = plainToClass(PresentationFindManyArgs, request.query);
    const results = await this.service.findPresentations(params.id, {
      ...query,
      select: {
        brandInstance: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/presentations")
  async connectPresentations(
    @common.Param() params: BrandInstanceWhereUniqueInput,
    @common.Body() body: PresentationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      presentations: {
        connect: body,
      },
    };
    await this.service.updateBrandInstance({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/presentations")
  async updatePresentations(
    @common.Param() params: BrandInstanceWhereUniqueInput,
    @common.Body() body: PresentationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      presentations: {
        set: body,
      },
    };
    await this.service.updateBrandInstance({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/presentations")
  async disconnectPresentations(
    @common.Param() params: BrandInstanceWhereUniqueInput,
    @common.Body() body: PresentationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      presentations: {
        disconnect: body,
      },
    };
    await this.service.updateBrandInstance({
      where: params,
      data,
      select: { id: true },
    });
  }
}
