/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Presentation as PrismaPresentation,
  Feedback as PrismaFeedback,
  BrandInstance as PrismaBrandInstance,
} from "@prisma/client";

import { UploadPresentationInputDto } from "../UploadPresentationInputDto";
import { UploadPresentationOutputDto } from "../UploadPresentationOutputDto";

export class PresentationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PresentationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.presentation.count(args);
  }

  async presentations(
    args: Prisma.PresentationFindManyArgs
  ): Promise<PrismaPresentation[]> {
    return this.prisma.presentation.findMany(args);
  }
  async presentation(
    args: Prisma.PresentationFindUniqueArgs
  ): Promise<PrismaPresentation | null> {
    return this.prisma.presentation.findUnique(args);
  }
  async createPresentation(
    args: Prisma.PresentationCreateArgs
  ): Promise<PrismaPresentation> {
    return this.prisma.presentation.create(args);
  }
  async updatePresentation(
    args: Prisma.PresentationUpdateArgs
  ): Promise<PrismaPresentation> {
    return this.prisma.presentation.update(args);
  }
  async deletePresentation(
    args: Prisma.PresentationDeleteArgs
  ): Promise<PrismaPresentation> {
    return this.prisma.presentation.delete(args);
  }

  async findFeedbacks(
    parentId: string,
    args: Prisma.FeedbackFindManyArgs
  ): Promise<PrismaFeedback[]> {
    return this.prisma.presentation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .feedbacks(args);
  }

  async getBrandInstance(
    parentId: string
  ): Promise<PrismaBrandInstance | null> {
    return this.prisma.presentation
      .findUnique({
        where: { id: parentId },
      })
      .brandInstance();
  }
  async UploadPresentation(
    args: UploadPresentationInputDto
  ): Promise<UploadPresentationOutputDto> {
    throw new Error("Not implemented");
  }
}
