/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PresentationService } from "../presentation.service";
import { PresentationCreateInput } from "./PresentationCreateInput";
import { Presentation } from "./Presentation";
import { PresentationFindManyArgs } from "./PresentationFindManyArgs";
import { PresentationWhereUniqueInput } from "./PresentationWhereUniqueInput";
import { PresentationUpdateInput } from "./PresentationUpdateInput";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { FeedbackWhereUniqueInput } from "../../feedback/base/FeedbackWhereUniqueInput";
import { UploadPresentationInputDto } from "../UploadPresentationInputDto";
import { UploadPresentationOutputDto } from "../UploadPresentationOutputDto";

export class PresentationControllerBase {
  constructor(protected readonly service: PresentationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Presentation })
  async createPresentation(
    @common.Body() data: PresentationCreateInput
  ): Promise<Presentation> {
    return await this.service.createPresentation({
      data: {
        ...data,

        brandInstance: data.brandInstance
          ? {
              connect: data.brandInstance,
            }
          : undefined,
      },
      select: {
        brandInstance: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Presentation] })
  @ApiNestedQuery(PresentationFindManyArgs)
  async presentations(@common.Req() request: Request): Promise<Presentation[]> {
    const args = plainToClass(PresentationFindManyArgs, request.query);
    return this.service.presentations({
      ...args,
      select: {
        brandInstance: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Presentation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async presentation(
    @common.Param() params: PresentationWhereUniqueInput
  ): Promise<Presentation | null> {
    const result = await this.service.presentation({
      where: params,
      select: {
        brandInstance: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Presentation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePresentation(
    @common.Param() params: PresentationWhereUniqueInput,
    @common.Body() data: PresentationUpdateInput
  ): Promise<Presentation | null> {
    try {
      return await this.service.updatePresentation({
        where: params,
        data: {
          ...data,

          brandInstance: data.brandInstance
            ? {
                connect: data.brandInstance,
              }
            : undefined,
        },
        select: {
          brandInstance: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          filePath: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Presentation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePresentation(
    @common.Param() params: PresentationWhereUniqueInput
  ): Promise<Presentation | null> {
    try {
      return await this.service.deletePresentation({
        where: params,
        select: {
          brandInstance: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          filePath: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/feedbacks")
  @ApiNestedQuery(FeedbackFindManyArgs)
  async findFeedbacks(
    @common.Req() request: Request,
    @common.Param() params: PresentationWhereUniqueInput
  ): Promise<Feedback[]> {
    const query = plainToClass(FeedbackFindManyArgs, request.query);
    const results = await this.service.findFeedbacks(params.id, {
      ...query,
      select: {
        createdAt: true,
        feedbackMessage: true,
        id: true,

        presentation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/feedbacks")
  async connectFeedbacks(
    @common.Param() params: PresentationWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        connect: body,
      },
    };
    await this.service.updatePresentation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/feedbacks")
  async updateFeedbacks(
    @common.Param() params: PresentationWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        set: body,
      },
    };
    await this.service.updatePresentation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/feedbacks")
  async disconnectFeedbacks(
    @common.Param() params: PresentationWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedbacks: {
        disconnect: body,
      },
    };
    await this.service.updatePresentation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/upload")
  @swagger.ApiOkResponse({
    type: UploadPresentationOutputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadPresentation(
    @common.Body()
    body: UploadPresentationInputDto
  ): Promise<UploadPresentationOutputDto> {
    return this.service.UploadPresentation(body);
  }
}
