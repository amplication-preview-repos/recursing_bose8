/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Presentation } from "./Presentation";
import { PresentationCountArgs } from "./PresentationCountArgs";
import { PresentationFindManyArgs } from "./PresentationFindManyArgs";
import { PresentationFindUniqueArgs } from "./PresentationFindUniqueArgs";
import { CreatePresentationArgs } from "./CreatePresentationArgs";
import { UpdatePresentationArgs } from "./UpdatePresentationArgs";
import { DeletePresentationArgs } from "./DeletePresentationArgs";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { BrandInstance } from "../../brandInstance/base/BrandInstance";
import { UploadPresentationInputDto } from "../UploadPresentationInputDto";
import { UploadPresentationOutputDto } from "../UploadPresentationOutputDto";
import { PresentationService } from "../presentation.service";
@graphql.Resolver(() => Presentation)
export class PresentationResolverBase {
  constructor(protected readonly service: PresentationService) {}

  async _presentationsMeta(
    @graphql.Args() args: PresentationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Presentation])
  async presentations(
    @graphql.Args() args: PresentationFindManyArgs
  ): Promise<Presentation[]> {
    return this.service.presentations(args);
  }

  @graphql.Query(() => Presentation, { nullable: true })
  async presentation(
    @graphql.Args() args: PresentationFindUniqueArgs
  ): Promise<Presentation | null> {
    const result = await this.service.presentation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Presentation)
  async createPresentation(
    @graphql.Args() args: CreatePresentationArgs
  ): Promise<Presentation> {
    return await this.service.createPresentation({
      ...args,
      data: {
        ...args.data,

        brandInstance: args.data.brandInstance
          ? {
              connect: args.data.brandInstance,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Presentation)
  async updatePresentation(
    @graphql.Args() args: UpdatePresentationArgs
  ): Promise<Presentation | null> {
    try {
      return await this.service.updatePresentation({
        ...args,
        data: {
          ...args.data,

          brandInstance: args.data.brandInstance
            ? {
                connect: args.data.brandInstance,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Presentation)
  async deletePresentation(
    @graphql.Args() args: DeletePresentationArgs
  ): Promise<Presentation | null> {
    try {
      return await this.service.deletePresentation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Feedback], { name: "feedbacks" })
  async findFeedbacks(
    @graphql.Parent() parent: Presentation,
    @graphql.Args() args: FeedbackFindManyArgs
  ): Promise<Feedback[]> {
    const results = await this.service.findFeedbacks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => BrandInstance, {
    nullable: true,
    name: "brandInstance",
  })
  async getBrandInstance(
    @graphql.Parent() parent: Presentation
  ): Promise<BrandInstance | null> {
    const result = await this.service.getBrandInstance(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UploadPresentationOutputDto)
  async UploadPresentation(
    @graphql.Args()
    args: UploadPresentationInputDto
  ): Promise<UploadPresentationOutputDto> {
    return this.service.UploadPresentation(args);
  }
}
