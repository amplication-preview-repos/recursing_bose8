/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BrandRule } from "./BrandRule";
import { BrandRuleCountArgs } from "./BrandRuleCountArgs";
import { BrandRuleFindManyArgs } from "./BrandRuleFindManyArgs";
import { BrandRuleFindUniqueArgs } from "./BrandRuleFindUniqueArgs";
import { CreateBrandRuleArgs } from "./CreateBrandRuleArgs";
import { UpdateBrandRuleArgs } from "./UpdateBrandRuleArgs";
import { DeleteBrandRuleArgs } from "./DeleteBrandRuleArgs";
import { BrandInstance } from "../../brandInstance/base/BrandInstance";
import { BrandRuleService } from "../brandRule.service";
@graphql.Resolver(() => BrandRule)
export class BrandRuleResolverBase {
  constructor(protected readonly service: BrandRuleService) {}

  async _brandRulesMeta(
    @graphql.Args() args: BrandRuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BrandRule])
  async brandRules(
    @graphql.Args() args: BrandRuleFindManyArgs
  ): Promise<BrandRule[]> {
    return this.service.brandRules(args);
  }

  @graphql.Query(() => BrandRule, { nullable: true })
  async brandRule(
    @graphql.Args() args: BrandRuleFindUniqueArgs
  ): Promise<BrandRule | null> {
    const result = await this.service.brandRule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BrandRule)
  async createBrandRule(
    @graphql.Args() args: CreateBrandRuleArgs
  ): Promise<BrandRule> {
    return await this.service.createBrandRule({
      ...args,
      data: {
        ...args.data,

        brandInstance: args.data.brandInstance
          ? {
              connect: args.data.brandInstance,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => BrandRule)
  async updateBrandRule(
    @graphql.Args() args: UpdateBrandRuleArgs
  ): Promise<BrandRule | null> {
    try {
      return await this.service.updateBrandRule({
        ...args,
        data: {
          ...args.data,

          brandInstance: args.data.brandInstance
            ? {
                connect: args.data.brandInstance,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BrandRule)
  async deleteBrandRule(
    @graphql.Args() args: DeleteBrandRuleArgs
  ): Promise<BrandRule | null> {
    try {
      return await this.service.deleteBrandRule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => BrandInstance, {
    nullable: true,
    name: "brandInstance",
  })
  async getBrandInstance(
    @graphql.Parent() parent: BrandRule
  ): Promise<BrandInstance | null> {
    const result = await this.service.getBrandInstance(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
