/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BrandRule as PrismaBrandRule,
  BrandInstance as PrismaBrandInstance,
} from "@prisma/client";

export class BrandRuleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BrandRuleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.brandRule.count(args);
  }

  async brandRules(
    args: Prisma.BrandRuleFindManyArgs
  ): Promise<PrismaBrandRule[]> {
    return this.prisma.brandRule.findMany(args);
  }
  async brandRule(
    args: Prisma.BrandRuleFindUniqueArgs
  ): Promise<PrismaBrandRule | null> {
    return this.prisma.brandRule.findUnique(args);
  }
  async createBrandRule(
    args: Prisma.BrandRuleCreateArgs
  ): Promise<PrismaBrandRule> {
    return this.prisma.brandRule.create(args);
  }
  async updateBrandRule(
    args: Prisma.BrandRuleUpdateArgs
  ): Promise<PrismaBrandRule> {
    return this.prisma.brandRule.update(args);
  }
  async deleteBrandRule(
    args: Prisma.BrandRuleDeleteArgs
  ): Promise<PrismaBrandRule> {
    return this.prisma.brandRule.delete(args);
  }

  async getBrandInstance(
    parentId: string
  ): Promise<PrismaBrandInstance | null> {
    return this.prisma.brandRule
      .findUnique({
        where: { id: parentId },
      })
      .brandInstance();
  }
}
