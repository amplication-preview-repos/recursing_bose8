/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BrandRuleService } from "../brandRule.service";
import { BrandRuleCreateInput } from "./BrandRuleCreateInput";
import { BrandRule } from "./BrandRule";
import { BrandRuleFindManyArgs } from "./BrandRuleFindManyArgs";
import { BrandRuleWhereUniqueInput } from "./BrandRuleWhereUniqueInput";
import { BrandRuleUpdateInput } from "./BrandRuleUpdateInput";

export class BrandRuleControllerBase {
  constructor(protected readonly service: BrandRuleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BrandRule })
  async createBrandRule(
    @common.Body() data: BrandRuleCreateInput
  ): Promise<BrandRule> {
    return await this.service.createBrandRule({
      data: {
        ...data,

        brandInstance: data.brandInstance
          ? {
              connect: data.brandInstance,
            }
          : undefined,
      },
      select: {
        brandInstance: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        ruleDescription: true,
        severity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BrandRule] })
  @ApiNestedQuery(BrandRuleFindManyArgs)
  async brandRules(@common.Req() request: Request): Promise<BrandRule[]> {
    const args = plainToClass(BrandRuleFindManyArgs, request.query);
    return this.service.brandRules({
      ...args,
      select: {
        brandInstance: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        ruleDescription: true,
        severity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BrandRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async brandRule(
    @common.Param() params: BrandRuleWhereUniqueInput
  ): Promise<BrandRule | null> {
    const result = await this.service.brandRule({
      where: params,
      select: {
        brandInstance: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        ruleDescription: true,
        severity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BrandRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBrandRule(
    @common.Param() params: BrandRuleWhereUniqueInput,
    @common.Body() data: BrandRuleUpdateInput
  ): Promise<BrandRule | null> {
    try {
      return await this.service.updateBrandRule({
        where: params,
        data: {
          ...data,

          brandInstance: data.brandInstance
            ? {
                connect: data.brandInstance,
              }
            : undefined,
        },
        select: {
          brandInstance: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          ruleDescription: true,
          severity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BrandRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBrandRule(
    @common.Param() params: BrandRuleWhereUniqueInput
  ): Promise<BrandRule | null> {
    try {
      return await this.service.deleteBrandRule({
        where: params,
        select: {
          brandInstance: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          ruleDescription: true,
          severity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
